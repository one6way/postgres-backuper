apiVersion: v1
kind: Secret
metadata:
  name: s3-credentials
  namespace: spark
type: Opaque
data:
  accesskey: bWluaW8= # minio в base64
  secretkey: bWluaW8xMjM= # minio123 в base64
---
apiVersion: v1
kind: Secret
metadata:
  name: kafka-ssl-passwords
  namespace: spark
type: Opaque
data:
  keystore-password: cGFzc3dvcmQ= # password в base64
  truststore-password: cGFzc3dvcmQ= # password в base64
---
apiVersion: "sparkoperator.k8s.io/v1beta2"
kind: SparkApplication
metadata:
  name: kafka-spark-adb
  namespace: spark
spec:
  type: Scala
  mode: cluster
  image: "apache/spark:3.3.0"
  mainClass: org.example.KafkaSparkADB
  sparkVersion: "3.3.0"
  restartPolicy:
    type: Never
  driver:
    cores: 1
    memory: "1g"
    serviceAccount: spark
    volumeMounts:
      - name: kafka-certs
        mountPath: /etc/kafka/ssl
    env:
      - name: KEYSTORE_PASSWORD
        valueFrom:
          secretKeyRef:
            name: kafka-ssl-passwords
            key: keystore-password
      - name: TRUSTSTORE_PASSWORD
        valueFrom:
          secretKeyRef:
            name: kafka-ssl-passwords
            key: truststore-password
    initContainers:
      - name: fetch-certs
        image: amazon/aws-cli:2.11.22
        command:
        - /bin/sh
        - -c
        - |
          # Использование AWS CLI для загрузки сертификатов из S3/MinIO
          aws s3 cp s3://kafka-certs-bucket/keystore.jks /mnt/certs/keystore.jks
          aws s3 cp s3://kafka-certs-bucket/truststore.jks /mnt/certs/truststore.jks
          # Установка корректных прав доступа
          chmod 400 /mnt/certs/*
        env:
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: s3-credentials
              key: accesskey
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: s3-credentials
              key: secretkey
        - name: AWS_ENDPOINT_URL
          value: http://minio:9000
        volumeMounts:
        - name: kafka-certs
          mountPath: /mnt/certs
  executor:
    cores: 1
    instances: 2
    memory: "1g"
    volumeMounts:
      - name: kafka-certs
        mountPath: /etc/kafka/ssl
    env:
      - name: KEYSTORE_PASSWORD
        valueFrom:
          secretKeyRef:
            name: kafka-ssl-passwords
            key: keystore-password
      - name: TRUSTSTORE_PASSWORD
        valueFrom:
          secretKeyRef:
            name: kafka-ssl-passwords
            key: truststore-password
    initContainers:
      - name: fetch-certs
        image: amazon/aws-cli:2.11.22
        command:
        - /bin/sh
        - -c
        - |
          # Использование AWS CLI для загрузки сертификатов из S3/MinIO
          aws s3 cp s3://kafka-certs-bucket/keystore.jks /mnt/certs/keystore.jks
          aws s3 cp s3://kafka-certs-bucket/truststore.jks /mnt/certs/truststore.jks
          # Установка корректных прав доступа
          chmod 400 /mnt/certs/*
        env:
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: s3-credentials
              key: accesskey
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: s3-credentials
              key: secretkey
        - name: AWS_ENDPOINT_URL
          value: http://minio:9000
        volumeMounts:
        - name: kafka-certs
          mountPath: /mnt/certs
  volumes:
    - name: kafka-certs
      emptyDir: {}
  sparkConf:
    "spark.kafka.ssl.keystore.location": "/etc/kafka/ssl/keystore.jks"
    "spark.kafka.ssl.truststore.location": "/etc/kafka/ssl/truststore.jks"
    "spark.kafka.ssl.keystore.password": "${KEYSTORE_PASSWORD}"
    "spark.kafka.ssl.truststore.password": "${TRUSTSTORE_PASSWORD}"
    "spark.kafka.security.protocol": "SSL" 